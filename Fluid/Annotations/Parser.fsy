%{
open FluidTypes.Refinements
%}

%start expr
%token <string> ID
%token <int> INT
%token LPAREN RPAREN
%token PLUS MINUS
%token EQUAL GREATER LESS GREATEREQUAL LESSEQUAL NOTEQUAL
%token NOT
%token TRUE FALSE
%token EOF
%type < FluidTypes.Refinements.Definitions.Term > expr
%left PLUS MINUS
%nonassoc EQUAL GREATER LESS

%%
expr:
    | expr0 EOF { $1 }

expr0:
    | NOT expr0           { mk_not $2 }
    | expr0 EQUAL expr0   { mk_binop_app EqualInt $1 $3 }
    | expr0 GREATER expr0 { mk_binop_app Greater $1 $3 }
    | expr0 LESS expr0    { mk_binop_app Less $1 $3 }
    | expr0 GREATEREQUAL expr0 { mk_binop_app GreaterEqual $1 $3 }
    | expr0 LESSEQUAL expr0    { mk_binop_app LessEqual $1 $3 }
    | expr0 NOTEQUAL expr0     { mk_binop_app NotEqualInt $1 $3 }
    | expr1               { $1 }

expr1:
    | expr1 PLUS expr1    { mk_binop_app Plus $1 $3 }
    | expr1 MINUS expr1   { mk_binop_app Minus $1 $3 }
    | expr2               { $1 }

expr2:
    | expr2 expr3 { App($1, $2) }
    | expr3       { $1 }

expr3:
    | ID                  { Var $1 }
    | LPAREN expr0 RPAREN { $2 }
    | INT                 { Const (IntLiteral $1) }
    | TRUE                { Const (BoolLiteral true) }
    | FALSE               { Const (BoolLiteral false) }
