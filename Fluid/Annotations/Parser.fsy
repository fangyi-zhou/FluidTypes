%{
open FluidTypes.Refinements
%}

%start main
%token <string> ID
%token <int> INT
%token LPAREN RPAREN PLUS MINUS EQUAL GREATER LESS NOT TRUE FALSE EOF
%type < FluidTypes.Refinements.Definitions.Term > main
%left PLUS MINUS

%%
main :
    | expr EOF { $1 }

expr :
    | expr PLUS expr { mk_binop_app Plus $1 $3 }
    | expr MINUS expr { mk_binop_app Minus $1 $3 }
    | expr1 { $1 }

expr1:
    | expr1 expr2 { App($1, $2) }
    | expr2 { $1 }

expr2:
    | ID { Var $1 }
    | LPAREN expr RPAREN { $2 }
    | INT { Const (IntLiteral $1) }
    | TRUE { Const (BoolLiteral true) }
    | FALSE { Const (BoolLiteral false) }
